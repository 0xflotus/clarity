(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{"+nku":function(l,n){l.exports='<form clrForm>\n    <clr-input-container>\n        <label class="clr-col-xs-12 clr-col-md-4">Field 1 label</label>\n        <input class="clr-col-xs-12 clr-col-md-8" clrInput type="text" [(ngModel)]="model" name="example" required />\n        <clr-control-helper>Helper text that shows while it is pristine and valid</clr-control-helper>\n        <clr-control-error>Error message that appears after focus is lost and control is invalid</clr-control-error>\n    </clr-input-container>\n</form>'},"0Uvp":function(l,n){l.exports='<form clrForm>\n    <clr-input-container>\n        <label>Field 1 label</label>\n        <input clrInput type="text" [(ngModel)]="model" name="example" required />\n        <clr-control-helper>Helper text that shows while it is pristine and valid</clr-control-helper>\n        <clr-control-error>Error message that appears after focus is lost and control is invalid</clr-control-error>\n    </clr-input-container>\n</form>'},"2ASZ":function(l,n){l.exports='<form clrForm [formGroup]="exampleForm">\n    <clr-input-container>\n        <label>Field 1 label</label>\n        <input clrInput type="text" formControlName="sample" />\n        <clr-control-helper>Helper text that shows while it is pristine and valid</clr-control-helper>\n        <clr-control-error>Error message that appears after focus is lost and control is invalid</clr-control-error>\n    </clr-input-container>\n</form>'},"8FRH":function(l,n){l.exports='<form clrForm clrLayout="horizontal">\n    ... form controls\n</form>'},"9UzD":function(l,n){l.exports='<form class="clr-form"></form> // Vertical, class not necessary\n<form class="clr-form clr-form-horizontal"></form> // Horizontal\n<form class="clr-form clr-form-compact"></form> // Compact'},CGc6:function(l,n){l.exports='import {Component} from "@angular/core";\nimport {FormGroup, FormControl, Validators} from "@angular/forms";\n\n@Component({\n    template: `\n    <form clrForm [formGroup]="exampleForm">\n        <input clrInput formControlName="sample" />\n        <button class="btn btn-primary" type="submit" (click)="submit()">Submit</button>\n        <button class="btn" type="button" (click)="resetForm()">Reset</button>\n    </form>\n    `\n})\nexport class ReactiveFormsDemo {\n    exampleForm = new FormGroup({\n        sample: new FormControl(\'\', Validators.required),\n    });\n\n    resetForm() {\n        this.exampleForm.reset();\n    }\n\n    submit() {\n        // ...\n    }\n}'},Hrx9:function(l,n){l.exports='<form class="clr-form">\n    <div class="clr-form-control">\n        <label for="example" class="clr-control-label">Label</label>\n        <div class="clr-control-container">\n            <div class="clr-input-wrapper">\n                <input type="text" id="example" placeholder="Example Input" class="clr-input">\n                <clr-icon class="clr-validate-icon" shape="exclamation-circle"></clr-icon>\n            </div>\n            <span class="clr-subtext">Helper Text</span>\n        </div>\n    </div>\n</form>'},IlAM:function(l,n){l.exports="<form clrForm>\n    ... form controls\n</form>"},RCjE:function(l,n){l.exports='import {ViewChild, Component} from "@angular/core";\nimport {FormGroup, FormControl, Validators} from "@angular/forms";\n\n@Component({\n    template: `\n    <form clrForm [formGroup]="exampleForm">\n        <input clrInput formControlName="sample" />\n        <button class="btn btn-primary" type="submit" (click)="submit()">Submit</button>\n    </form>\n    `\n})\nexport class ReactiveFormsDemo {\n    @ViewChild(ClrForm) clrForm;\n\n    exampleForm = new FormGroup({\n        sample: new FormControl(\'\', Validators.required),\n    });\n\n    submit() {\n        if (this.exampleForm.invalid) {\n            this.clrForm.markAsDirty();\n        } else {\n            // ...\n        }\n    }\n}'},WGtB:function(l,n){l.exports='<form class="clr-form clr-form-compact">\n    <div class="clr-form-control clr-row">\n        <label for="example" class="clr-control-label clr-col-xs-12 clr-col-md-2">Label</label>\n        <div class="clr-control-container clr-col-xs-12 clr-col-md-10">\n            <div class="clr-input-wrapper">\n                <input type="text" id="example" placeholder="Example Input" class="clr-input">\n                <clr-icon class="clr-validate-icon" shape="exclamation-circle"></clr-icon>\n            </div>\n            <span class="clr-subtext">Helper Text</span>\n        </div>\n    </div>\n</form>'},XIy8:function(l,n,u){"use strict";u.r(n);var e=u("CcnG"),o=function(){},r=u("zl1X"),a=u("pMnS"),t=u("+Xo0"),i=u("0G9f"),s=u("xLE1"),c=u("QkwE"),d=u("vAyd"),p=-2,m=function(){return function(){this.id=p+4,p+=4}}(),b=e.Ra({encapsulation:0,styles:[".clr-form-horizontal[_ngcontent-%COMP%]   .clr-control-label[_ngcontent-%COMP%], .clr-form-compact[_ngcontent-%COMP%]   .clr-control-label[_ngcontent-%COMP%] {\n    width: 2rem;\n    min-width: 2rem;\n}\n.clr-form-horizontal[_ngcontent-%COMP%]   .clr-textarea[_ngcontent-%COMP%], .clr-form-compact[_ngcontent-%COMP%]   .clr-textarea[_ngcontent-%COMP%] {\n    max-width: 170px;\n}\n.clr-form-compact[_ngcontent-%COMP%]   .clr-input[_ngcontent-%COMP%] {\n    max-width: 100px;\n}\nh5[_ngcontent-%COMP%] {\n    margin-top: 0;\n}"],data:{}});function h(l){return e.nb(0,[(l()(),e.Ta(0,0,null,null,36,"form",[],[[8,"className",0]],null,null,null,null)),(l()(),e.Ta(1,0,null,null,6,"div",[["class","clr-form-control"]],null,null,null,null,null)),(l()(),e.Ta(2,0,null,null,2,"label",[["class","clr-control-label"]],[[1,"for",0]],null,null,null,null)),e.Sa(3,212992,null,0,s.Na,[[2,s.Td],[2,s.Ud],[2,s.Vd],e.H,e.l],{forAttr:[0,"forAttr"]},null),(l()(),e.lb(-1,null,["Label"])),(l()(),e.Ta(5,0,null,null,2,"div",[["class","clr-control-container"]],null,null,null,null,null)),(l()(),e.Ta(6,0,null,null,1,"div",[["class","clr-input-wrapper"]],null,null,null,null,null)),(l()(),e.Ta(7,0,null,null,0,"input",[["class","clr-input"],["placeholder","Placeholder"],["type","text"]],[[8,"id",0]],null,null,null,null)),(l()(),e.Ta(8,0,null,null,12,"div",[["class","clr-form-control"]],null,null,null,null,null)),(l()(),e.Ta(9,0,null,null,2,"label",[["class","clr-control-label"]],[[1,"for",0]],null,null,null,null)),e.Sa(10,212992,null,0,s.Na,[[2,s.Td],[2,s.Ud],[2,s.Vd],e.H,e.l],{forAttr:[0,"forAttr"]},null),(l()(),e.lb(-1,null,["Label"])),(l()(),e.Ta(12,0,null,null,8,"div",[["class","clr-control-container"]],null,null,null,null,null)),(l()(),e.Ta(13,0,null,null,7,"div",[["class","clr-select-wrapper"]],null,null,null,null,null)),(l()(),e.Ta(14,0,null,null,6,"select",[["placeholder","Select Option"]],[[8,"id",0]],null,null,null,null)),(l()(),e.Ta(15,0,null,null,1,"option",[],null,null,null,null,null)),(l()(),e.lb(-1,null,["Option 1"])),(l()(),e.Ta(17,0,null,null,1,"option",[],null,null,null,null,null)),(l()(),e.lb(-1,null,["Option 2"])),(l()(),e.Ta(19,0,null,null,1,"option",[],null,null,null,null,null)),(l()(),e.lb(-1,null,["Option 3"])),(l()(),e.Ta(21,0,null,null,6,"div",[["class","clr-form-control"]],null,null,null,null,null)),(l()(),e.Ta(22,0,null,null,2,"label",[["class","clr-control-label"]],[[1,"for",0]],null,null,null,null)),e.Sa(23,212992,null,0,s.Na,[[2,s.Td],[2,s.Ud],[2,s.Vd],e.H,e.l],{forAttr:[0,"forAttr"]},null),(l()(),e.lb(-1,null,["Label"])),(l()(),e.Ta(25,0,null,null,2,"div",[["class","clr-control-container"]],null,null,null,null,null)),(l()(),e.Ta(26,0,null,null,1,"div",[["class","clr-textarea-wrapper"]],null,null,null,null,null)),(l()(),e.Ta(27,0,null,null,0,"textarea",[["class","clr-textarea"],["placeholder","Placeholder"]],[[8,"id",0]],null,null,null,null)),(l()(),e.Ta(28,0,null,null,8,"div",[["class","clr-form-control"]],null,null,null,null,null)),(l()(),e.Ta(29,0,null,null,2,"label",[["class","clr-control-label"],["for","example4"]],[[1,"for",0]],null,null,null,null)),e.Sa(30,212992,null,0,s.Na,[[2,s.Td],[2,s.Ud],[2,s.Vd],e.H,e.l],{forAttr:[0,"forAttr"]},null),(l()(),e.lb(-1,null,["Label"])),(l()(),e.Ta(32,0,null,null,4,"div",[["class","clr-control-container"]],null,null,null,null,null)),(l()(),e.Ta(33,0,null,null,1,"div",[["class","clr-input-wrapper"]],null,null,null,null,null)),(l()(),e.Ta(34,0,null,null,0,"input",[["class","clr-input"],["placeholder","Placeholder"],["type","text"]],[[8,"id",0]],null,null,null,null)),(l()(),e.Ta(35,0,null,null,1,"span",[["class","clr-subtext"]],null,null,null,null,null)),(l()(),e.lb(-1,null,["Helper Text"]))],function(l,n){var u=n.component;l(n,3,0,e.Va(1,"example",u.id,"")),l(n,10,0,e.Va(1,"example",u.id+1,"")),l(n,23,0,e.Va(1,"example",u.id+2,"")),l(n,30,0,"example4")},function(l,n){var u=n.component;l(n,0,0,e.Va(1,"clr-form clr-form-",u.layout.toLowerCase(),"")),l(n,2,0,e.db(n,3).forAttr),l(n,7,0,e.Va(1,"example",u.id,"")),l(n,9,0,e.db(n,10).forAttr),l(n,14,0,e.Va(1,"example",u.id+1,"")),l(n,22,0,e.db(n,23).forAttr),l(n,27,0,e.Va(1,"example",u.id+2,"")),l(n,29,0,e.db(n,30).forAttr),l(n,34,0,e.Va(1,"example",u.id+3,""))})}var f=u("mrSG"),g=u("N+3j"),T=u("lzo3"),w=u("e0Qs"),v=u("WGtB"),x=u("9UzD"),y=u("Hrx9"),F=u("pSHR"),M=u("IlAM"),C=u("0Uvp"),k=u("8FRH"),D=u("Z+lk"),S=u("2ASZ"),A=u("vuOX"),I=u("+nku"),E=u("CGc6"),L=u("RCjE"),H=function(l){function n(){var n=l.call(this,"forms")||this;return n.uiErrors=T,n.uiForm=w,n.uiGrid=v,n.uiLayouts=x,n.uiStructure=y,n.ngErrors=F,n.ngForm=M,n.ngHelpers=C,n.ngLayouts=k,n.ngReactiveTs=D,n.ngReactiveHtml=S,n.ngStructure=A,n.ngOverride=I,n.ngReset=E,n.ngValidate=L,n}return Object(f.c)(n,l),n}(g.a),R=e.Ra({encapsulation:2,styles:[],data:{}});function V(l){return e.nb(0,[(l()(),e.Ta(0,0,null,null,291,"clr-doc-wrapper",[],[[2,"dox-wrapper",null]],null,null,t.b,t.a)),e.Sa(1,49152,null,0,i.a,[],{title:[0,"title"],newLayout:[1,"newLayout"],ui:[2,"ui"],ng:[3,"ng"]},null),(l()(),e.Ta(2,0,null,0,289,"article",[],null,null,null,null,null)),(l()(),e.Ta(3,0,null,null,1,"h5",[["class","component-summary"],["id","a-form-is-a-structured-layout-of-related-input-components"]],null,null,null,null,null)),(l()(),e.lb(-1,null,[" Forms are a grouping of input controls that allow a user to submit information to your application. "])),(l()(),e.Ta(5,0,null,null,13,"div",[["class","alert alert-info"]],null,null,null,null,null)),(l()(),e.Ta(6,0,null,null,12,"div",[["class","alert-items"]],null,null,null,null,null)),(l()(),e.Ta(7,0,null,null,11,"div",[["class","alert-item static"]],null,null,null,null,null)),(l()(),e.Ta(8,0,null,null,2,"div",[["class","alert-icon-wrapper"]],null,null,null,null,null)),(l()(),e.Ta(9,0,null,null,1,"clr-icon",[["class","alert-icon"],["shape","info-circle"]],null,null,null,null,null)),e.Sa(10,16384,null,0,s.Ea,[],null,null),(l()(),e.Ta(11,0,null,null,7,"span",[["class","alert-text"]],null,null,null,null,null)),(l()(),e.lb(-1,null,[" The forms documentation here describes the new forms introduced in version 0.12. The old forms are still available, but deprecated for removal in version 2.0. To see the old grid documentation, go to "])),(l()(),e.Ta(13,0,null,null,1,"a",[["href","/clarity/documentation/v0.11/forms/"]],null,null,null,null,null)),(l()(),e.lb(-1,null,["0.11 forms documentation"])),(l()(),e.lb(-1,null,[". You will need to include the "])),(l()(),e.Ta(16,0,null,null,1,"code",[["class","clr-code"]],null,null,null,null,null)),(l()(),e.lb(-1,null,["ClrFormsDeprecatedModule"])),(l()(),e.lb(-1,null,[" in your Angular module imports for the old checkbox and datepicker to work. "])),(l()(),e.Ta(19,0,null,null,1,"h2",[["id","forms-using-angular"]],null,null,null,null,null)),(l()(),e.lb(-1,null,["Forms Using Angular"])),(l()(),e.Ta(21,0,null,null,1,"p",[],null,null,null,null,null)),(l()(),e.lb(-1,null,["Clarity has created a set of directives to help manage forms with minimal effort by developers. The structure is more condensed and easier to implement, so it is the recommended approach to use the following if you are using Angular. More form controls are being added regularly."])),(l()(),e.Ta(23,0,null,null,1,"h4",[],null,null,null,null,null)),(l()(),e.lb(-1,null,["Basic form"])),(l()(),e.Ta(25,0,null,null,4,"p",[],null,null,null,null,null)),(l()(),e.lb(-1,null,["Then declare a form start by adding the "])),(l()(),e.Ta(27,0,null,null,1,"code",[["class","clr-code"]],null,null,null,null,null)),(l()(),e.lb(-1,null,["clrForm"])),(l()(),e.lb(-1,null,[" directive to the form element. This will wire up some internals to manage the form itself."])),(l()(),e.Ta(30,0,null,null,1,"clr-code-snippet",[],null,null,null,c.b,c.a)),e.Sa(31,4243456,null,0,d.a,[],{code:[0,"code"]},null),(l()(),e.Ta(32,0,null,null,1,"h4",[],null,null,null,null,null)),(l()(),e.lb(-1,null,["Layout options"])),(l()(),e.Ta(34,0,null,null,4,"p",[],null,null,null,null,null)),(l()(),e.lb(-1,null,["If you wish to have a different layout, then you can use the "])),(l()(),e.Ta(36,0,null,null,1,"code",[["class","clr-code"]],null,null,null,null,null)),(l()(),e.lb(-1,null,["clrLayout"])),(l()(),e.lb(-1,null,[" directive to set the desired layout. The appropriate grid classes will be applied to enable automatic layout switching for mobile viewports."])),(l()(),e.Ta(39,0,null,null,1,"clr-code-snippet",[],null,null,null,c.b,c.a)),e.Sa(40,4243456,null,0,d.a,[],{code:[0,"code"]},null),(l()(),e.Ta(41,0,null,null,1,"h4",[],null,null,null,null,null)),(l()(),e.lb(-1,null,["Basic structure"])),(l()(),e.Ta(43,0,null,null,1,"p",[],null,null,null,null,null)),(l()(),e.lb(-1,null,["When you start to fill in your form controls, each will should be wrapped in a container like you see here in this text input example."])),(l()(),e.Ta(45,0,null,null,1,"clr-code-snippet",[],null,null,null,c.b,c.a)),e.Sa(46,4243456,null,0,d.a,[],{code:[0,"code"]},null),(l()(),e.Ta(47,0,null,null,1,"h4",[],null,null,null,null,null)),(l()(),e.lb(-1,null,["Helper and validation messages"])),(l()(),e.Ta(49,0,null,null,1,"p",[],null,null,null,null,null)),(l()(),e.lb(-1,null,["These Angular components also support built in helper text and validation with error messages. "])),(l()(),e.Ta(51,0,null,null,1,"clr-code-snippet",[],null,null,null,c.b,c.a)),e.Sa(52,4243456,null,0,d.a,[],{code:[0,"code"]},null),(l()(),e.Ta(53,0,null,null,1,"h4",[],null,null,null,null,null)),(l()(),e.lb(-1,null,["Multiple error messages"])),(l()(),e.Ta(55,0,null,null,7,"p",[],null,null,null,null,null)),(l()(),e.lb(-1,null,["If you want to support multiple error messages, you can do this by defining an error message for each scenario using "])),(l()(),e.Ta(57,0,null,null,1,"code",[["class","clr-code"]],null,null,null,null,null)),(l()(),e.lb(-1,null,["clrIfError"])),(l()(),e.lb(-1,null,[". It is recommended that you create an error message for each validatior you specify. Use the validator name provided in the binding for "])),(l()(),e.Ta(60,0,null,null,1,"code",[["class","clr-code"]],null,null,null,null,null)),(l()(),e.lb(-1,null,["*clrIfError=\"'errorName'\""])),(l()(),e.lb(-1,null,[", which might be your custom validator or a built in Angular one."])),(l()(),e.Ta(63,0,null,null,1,"h4",[],null,null,null,null,null)),(l()(),e.lb(-1,null,["Reset and force validation"])),(l()(),e.Ta(65,0,null,null,10,"p",[],null,null,null,null,null)),(l()(),e.lb(-1,null,["All Clarity form controls support resetting the validation state simply by calling the "])),(l()(),e.Ta(67,0,null,null,1,"code",[["class","clr-code"]],null,null,null,null,null)),(l()(),e.lb(-1,null,["reset()"])),(l()(),e.lb(-1,null,[" method on the "])),(l()(),e.Ta(70,0,null,null,1,"code",[["class","clr-code"]],null,null,null,null,null)),(l()(),e.lb(-1,null,["FormControl"])),(l()(),e.lb(-1,null,[" or "])),(l()(),e.Ta(73,0,null,null,1,"code",[["class","clr-code"]],null,null,null,null,null)),(l()(),e.lb(-1,null,["FormGroup"])),(l()(),e.lb(-1,null,["."])),(l()(),e.Ta(76,0,null,null,1,"clr-code-snippet",[["clrLanguage","typescript"]],null,null,null,c.b,c.a)),e.Sa(77,4243456,null,0,d.a,[],{code:[0,"code"],language:[1,"language"]},null),(l()(),e.Ta(78,0,null,null,4,"p",[],null,null,null,null,null)),(l()(),e.lb(-1,null,["Normally, validation errors only appear after the control has been focused on by the user. In cases where you want to force validation errors to show (such as when the user tried to submit a form), you simply need to mark every control as dirty with Angular. To make this easier, we have provided an API "])),(l()(),e.Ta(80,0,null,null,1,"code",[["class","clr-code"]],null,null,null,null,null)),(l()(),e.lb(-1,null,["ClrForm.markAsDirty()"])),(l()(),e.lb(-1,null,[" that will force all form controls inside of a form to be dirty, which will display the validation errors."])),(l()(),e.Ta(83,0,null,null,1,"clr-code-snippet",[["clrLanguage","typescript"]],null,null,null,c.b,c.a)),e.Sa(84,4243456,null,0,d.a,[],{code:[0,"code"],language:[1,"language"]},null),(l()(),e.Ta(85,0,null,null,1,"h4",[],null,null,null,null,null)),(l()(),e.lb(-1,null,["Overriding column widths"])),(l()(),e.Ta(87,0,null,null,4,"p",[],null,null,null,null,null)),(l()(),e.lb(-1,null,["For horizontal layouts, you can override the default widths for labels (2 columns) and controls (10 columns). Even on horizontal layouts, the default behavior should still use a vertical layout for narrow mobile sizes. That means you should always include the class "])),(l()(),e.Ta(89,0,null,null,1,"code",[["class","clr-code"]],null,null,null,null,null)),(l()(),e.lb(-1,null,["clr-col-xs-12"])),(l()(),e.lb(-1,null,[" on both the input and label. Ensure your override columns add up to 12 to use the full space."])),(l()(),e.Ta(92,0,null,null,1,"clr-code-snippet",[],null,null,null,c.b,c.a)),e.Sa(93,4243456,null,0,d.a,[],{code:[0,"code"]},null),(l()(),e.Ta(94,0,null,null,1,"h4",[],null,null,null,null,null)),(l()(),e.lb(-1,null,["Reactive Forms"])),(l()(),e.Ta(96,0,null,null,1,"p",[],null,null,null,null,null)),(l()(),e.lb(-1,null,["Forms also work with reactive forms with the same support for validations."])),(l()(),e.Ta(98,0,null,null,1,"clr-code-snippet",[["clrLanguage","typescript"]],null,null,null,c.b,c.a)),e.Sa(99,4243456,null,0,d.a,[],{code:[0,"code"],language:[1,"language"]},null),(l()(),e.Ta(100,0,null,null,1,"clr-code-snippet",[],null,null,null,c.b,c.a)),e.Sa(101,4243456,null,0,d.a,[],{code:[0,"code"]},null),(l()(),e.Ta(102,0,null,null,1,"h2",[["id","forms-code-samples"]],null,null,null,null,null)),(l()(),e.lb(-1,null,["Forms with CSS"])),(l()(),e.Ta(104,0,null,null,1,"p",[],null,null,null,null,null)),(l()(),e.lb(-1,null,["If you want to use just the HTML/CSS for building your own form controls, this section describes how to use them. If you are interested in how to use it with Angular, please jump to the Angular section."])),(l()(),e.Ta(106,0,null,null,1,"h4",[],null,null,null,null,null)),(l()(),e.lb(-1,null,["Basic form"])),(l()(),e.Ta(108,0,null,null,4,"p",[],null,null,null,null,null)),(l()(),e.lb(-1,null,["A Clarity form first must include the "])),(l()(),e.Ta(110,0,null,null,1,"code",[["class","clr-code"]],null,null,null,null,null)),(l()(),e.lb(-1,null,[".clr-form"])),(l()(),e.lb(-1,null,[" class, typically on the form element itself."])),(l()(),e.Ta(113,0,null,null,1,"clr-code-snippet",[],null,null,null,c.b,c.a)),e.Sa(114,4243456,null,0,d.a,[],{code:[0,"code"]},null),(l()(),e.Ta(115,0,null,null,1,"h4",[],null,null,null,null,null)),(l()(),e.lb(-1,null,["Layout options"])),(l()(),e.Ta(117,0,null,null,1,"p",[],null,null,null,null,null)),(l()(),e.lb(-1,null,["Forms support three layout options, horizontal, vertical (used if no classes are provided), and compact. You can change the layout by simply applying an additional class to the form."])),(l()(),e.Ta(119,0,null,null,1,"clr-code-snippet",[],null,null,null,c.b,c.a)),e.Sa(120,4243456,null,0,d.a,[],{code:[0,"code"]},null),(l()(),e.Ta(121,0,null,null,1,"h4",[],null,null,null,null,null)),(l()(),e.lb(-1,null,["Basic structure"])),(l()(),e.Ta(123,0,null,null,1,"p",[],null,null,null,null,null)),(l()(),e.lb(-1,null,["Each control that you add inside has a similar structure, and they are each covered in their own documentation. However, the general structure is like this for a normal text input."])),(l()(),e.Ta(125,0,null,null,1,"clr-code-snippet",[],null,null,null,c.b,c.a)),e.Sa(126,4243456,null,0,d.a,[],{code:[0,"code"]},null),(l()(),e.Ta(127,0,null,null,1,"h4",[],null,null,null,null,null)),(l()(),e.lb(-1,null,["Layouts with grid"])),(l()(),e.Ta(129,0,null,null,1,"p",[],null,null,null,null,null)),(l()(),e.lb(-1,null,["If you choose to use a layout other than vertical, you should also provide the corresponding grid classes to allow the form layout to dynamically switch to vertical for narrow width devices. Excluding this may cause experience issues with mobile or narrow widths."])),(l()(),e.Ta(131,0,null,null,1,"clr-code-snippet",[],null,null,null,c.b,c.a)),e.Sa(132,4243456,null,0,d.a,[],{code:[0,"code"]},null),(l()(),e.Ta(133,0,null,null,1,"h4",[],null,null,null,null,null)),(l()(),e.lb(-1,null,["Error state"])),(l()(),e.Ta(135,0,null,null,7,"p",[],null,null,null,null,null)),(l()(),e.lb(-1,null,["For error states, you simply need to add the "])),(l()(),e.Ta(137,0,null,null,1,"code",[["class","clr-code"]],null,null,null,null,null)),(l()(),e.lb(-1,null,["clr-error"])),(l()(),e.lb(-1,null,[" class to the "])),(l()(),e.Ta(140,0,null,null,1,"code",[["class","clr-code"]],null,null,null,null,null)),(l()(),e.lb(-1,null,["clr-control-container"])),(l()(),e.lb(-1,null,[" element. This will automatically display the error icon, turn the input outline to red, and change the color of the subtext to red. It is recommend that you change the content of the subtext for error messages, but that is up to the application to manage."])),(l()(),e.Ta(143,0,null,null,1,"clr-code-snippet",[],null,null,null,c.b,c.a)),e.Sa(144,4243456,null,0,d.a,[],{code:[0,"code"]},null),(l()(),e.Ta(145,0,null,null,1,"p",[],null,null,null,null,null)),(l()(),e.lb(-1,null,["View documentation for each form control to get specifics on their HTML structure."])),(l()(),e.Ta(147,0,null,null,144,"div",[["id","design-guidelines"]],null,null,null,null,null)),(l()(),e.Ta(148,0,null,null,1,"h3",[["id","guidelines"]],null,null,null,null,null)),(l()(),e.lb(-1,null,["Design Guidelines"])),(l()(),e.Ta(150,0,null,null,1,"p",[],null,null,null,null,null)),(l()(),e.lb(-1,null,["Forms are comprised of text and input components such as checkboxes, dropdowns, input fields, radio buttons, and toggle switches. The easier users can complete forms, the better your response rates will typically be. Forms should be clear, concise, and relevant to its context."])),(l()(),e.Ta(152,0,null,null,1,"h4",[["id","form-layouts"]],null,null,null,null,null)),(l()(),e.lb(-1,null,["Form Layouts "])),(l()(),e.Ta(154,0,null,null,1,"p",[],null,null,null,null,null)),(l()(),e.lb(-1,null,["Clarity offers three types of forms: horizontal (our recommended default), vertical and compact."])),(l()(),e.Ta(156,0,null,null,8,"div",[["class","clrweb-DoxMedia clr-row"]],null,null,null,null,null)),(l()(),e.Ta(157,0,null,null,2,"div",[["class","clrweb-DoxMedia-block clr-col-md-6"],["style","padding-top: 0"]],null,null,null,null,null)),(l()(),e.Ta(158,0,null,null,1,"clr-forms-example-block",[["layout","horizontal"]],null,null,null,h,b)),e.Sa(159,49152,null,0,m,[],{layout:[0,"layout"]},null),(l()(),e.Ta(160,0,null,null,4,"div",[["class","clrweb-DoxMedia-text clr-col-md-6"]],null,null,null,null,null)),(l()(),e.Ta(161,0,null,null,1,"h6",[],null,null,null,null,null)),(l()(),e.lb(-1,null,["Horizontal - Default"])),(l()(),e.Ta(163,0,null,null,1,"p",[],null,null,null,null,null)),(l()(),e.lb(-1,null,["Horizontal formats are good for the quick scanning of labels, and can be used in cases of limited vertical space. The space between label and input however can slow users down."])),(l()(),e.Ta(165,0,null,null,8,"div",[["class","clrweb-DoxMedia clr-row"]],null,null,null,null,null)),(l()(),e.Ta(166,0,null,null,2,"div",[["class","clrweb-DoxMedia-block clr-col-md-6"],["style","padding-top: 0"]],null,null,null,null,null)),(l()(),e.Ta(167,0,null,null,1,"clr-forms-example-block",[["layout","vertical"]],null,null,null,h,b)),e.Sa(168,49152,null,0,m,[],{layout:[0,"layout"]},null),(l()(),e.Ta(169,0,null,null,4,"div",[["class","clrweb-DoxMedia-text clr-col-md-6"]],null,null,null,null,null)),(l()(),e.Ta(170,0,null,null,1,"h6",[],null,null,null,null,null)),(l()(),e.lb(-1,null,["Vertical"])),(l()(),e.Ta(172,0,null,null,1,"p",[],null,null,null,null,null)),(l()(),e.lb(-1,null,["This option is better for scanning, mobile experiences, accessibility, and localization. While it offers better completion rates, it is less ideal for longer forms."])),(l()(),e.Ta(174,0,null,null,8,"div",[["class","clrweb-DoxMedia clr-row"]],null,null,null,null,null)),(l()(),e.Ta(175,0,null,null,2,"div",[["class","clrweb-DoxMedia-block clr-col-md-6"],["style","padding-top: 0"]],null,null,null,null,null)),(l()(),e.Ta(176,0,null,null,1,"clr-forms-example-block",[["layout","compact"]],null,null,null,h,b)),e.Sa(177,49152,null,0,m,[],{layout:[0,"layout"]},null),(l()(),e.Ta(178,0,null,null,4,"div",[["class","clrweb-DoxMedia-text clr-col-md-6"]],null,null,null,null,null)),(l()(),e.Ta(179,0,null,null,1,"h6",[],null,null,null,null,null)),(l()(),e.lb(-1,null,["Compact"])),(l()(),e.Ta(181,0,null,null,1,"p",[],null,null,null,null,null)),(l()(),e.lb(-1,null,["For cases with highly limited space, we provide a compact form layout."])),(l()(),e.Ta(183,0,null,null,1,"h4",[["id","form-architecture"]],null,null,null,null,null)),(l()(),e.lb(-1,null,["Form Architecture"])),(l()(),e.Ta(185,0,null,null,1,"h6",[],null,null,null,null,null)),(l()(),e.lb(-1,null,["Columns"])),(l()(),e.Ta(187,0,null,null,1,"p",[],null,null,null,null,null)),(l()(),e.lb(-1,null,["Forms should help users complete their goal as quickly as possible. Column structure can help make it easier for users to complete your form."])),(l()(),e.Ta(189,0,null,null,16,"div",[["class","clr-row"]],null,null,null,null,null)),(l()(),e.Ta(190,0,null,null,7,"div",[["class","clrweb-DoxMedia is-do-block clr-col-6"]],null,null,null,null,null)),(l()(),e.Ta(191,0,null,null,1,"div",[["class","clrweb-DoxMedia-img"]],null,null,null,null,null)),(l()(),e.Ta(192,0,null,null,0,"img",[["alt","use a single column for forms layout"],["src","assets/images/documentation/forms/architecture-do.svg"]],null,null,null,null,null)),(l()(),e.Ta(193,0,null,null,4,"div",[["class","clrweb-DoxMedia-text"]],null,null,null,null,null)),(l()(),e.Ta(194,0,null,null,1,"h6",[["class","clrweb-DoxMedia-do-dont"]],null,null,null,null,null)),(l()(),e.lb(-1,null,["Do"])),(l()(),e.Ta(196,0,null,null,1,"p",[],null,null,null,null,null)),(l()(),e.lb(-1,null,["Put forms in one column. Multiple columns disrupt users\u2019 vertical rhythm and completion."])),(l()(),e.Ta(198,0,null,null,7,"div",[["class","clrweb-DoxMedia is-dont-block clr-col-6"]],null,null,null,null,null)),(l()(),e.Ta(199,0,null,null,1,"div",[["class","clrweb-DoxMedia-img"]],null,null,null,null,null)),(l()(),e.Ta(200,0,null,null,0,"img",[["alt","don't use multiple columns for forms"],["src","assets/images/documentation/forms/architecture-dont.svg"]],null,null,null,null,null)),(l()(),e.Ta(201,0,null,null,4,"div",[["class","clrweb-DoxMedia-text"]],null,null,null,null,null)),(l()(),e.Ta(202,0,null,null,1,"h6",[["class","clrweb-DoxMedia-do-dont"]],null,null,null,null,null)),(l()(),e.lb(-1,null,["Don't"])),(l()(),e.Ta(204,0,null,null,1,"p",[],null,null,null,null,null)),(l()(),e.lb(-1,null,["Create multiple columns of input fields per page, except for small, related inputs like name \u201cfirst\u201d and \u201clast.\u201d"])),(l()(),e.Ta(206,0,null,null,1,"h4",[["id","input-grouping"]],null,null,null,null,null)),(l()(),e.lb(-1,null,["Input Grouping"])),(l()(),e.Ta(208,0,null,null,1,"p",[],null,null,null,null,null)),(l()(),e.lb(-1,null,["Grouping will make scanning easier. A form with more than 6 inputs will likely have inputs that can be grouped together, like \u201caddress\u201d: street, city, zip, county, country, etc."])),(l()(),e.Ta(210,0,null,null,1,"p",[],null,null,null,null,null)),(l()(),e.lb(-1,null,["For the grouping of labels and their input fields, we recommend grouping labels closely with their respective input fields."])),(l()(),e.Ta(212,0,null,null,18,"div",[["class","clr-row"]],null,null,null,null,null)),(l()(),e.Ta(213,0,null,null,5,"div",[["class","clrweb-DoxMedia is-do-block clr-col-4"]],null,null,null,null,null)),(l()(),e.Ta(214,0,null,null,1,"div",[["class","clrweb-DoxMedia-img"]],null,null,null,null,null)),(l()(),e.Ta(215,0,null,null,0,"img",[["alt","align inputs and labels"],["src","assets/images/documentation/forms/input-grouping-do.svg"]],null,null,null,null,null)),(l()(),e.Ta(216,0,null,null,2,"div",[["class","clrweb-DoxMedia-text"]],null,null,null,null,null)),(l()(),e.Ta(217,0,null,null,1,"h6",[["class","clrweb-DoxMedia-do-dont"]],null,null,null,null,null)),(l()(),e.lb(-1,null,["Do"])),(l()(),e.Ta(219,0,null,null,5,"div",[["class","clrweb-DoxMedia is-do-block clr-col-4"]],null,null,null,null,null)),(l()(),e.Ta(220,0,null,null,1,"div",[["class","clrweb-DoxMedia-img"]],null,null,null,null,null)),(l()(),e.Ta(221,0,null,null,0,"img",[["alt","don't have inputs misaligned"],["src","assets/images/documentation/forms/input-grouping-do2.svg"]],null,null,null,null,null)),(l()(),e.Ta(222,0,null,null,2,"div",[["class","clrweb-DoxMedia-text"]],null,null,null,null,null)),(l()(),e.Ta(223,0,null,null,1,"h6",[["class","clrweb-DoxMedia-do-dont"]],null,null,null,null,null)),(l()(),e.lb(-1,null,["Do"])),(l()(),e.Ta(225,0,null,null,5,"div",[["class","clrweb-DoxMedia is-dont-block clr-col-4"]],null,null,null,null,null)),(l()(),e.Ta(226,0,null,null,1,"div",[["class","clrweb-DoxMedia-img"]],null,null,null,null,null)),(l()(),e.Ta(227,0,null,null,0,"img",[["alt","don't right align inputs"],["src","assets/images/documentation/forms/input-grouping-dont.svg"]],null,null,null,null,null)),(l()(),e.Ta(228,0,null,null,2,"div",[["class","clrweb-DoxMedia-text"]],null,null,null,null,null)),(l()(),e.Ta(229,0,null,null,1,"h6",[["class","clrweb-DoxMedia-do-dont"]],null,null,null,null,null)),(l()(),e.lb(-1,null,["Don't"])),(l()(),e.Ta(231,0,null,null,1,"h4",[],null,null,null,null,null)),(l()(),e.lb(-1,null,["Form Length"])),(l()(),e.Ta(233,0,null,null,1,"p",[],null,null,null,null,null)),(l()(),e.lb(-1,null,["Forms should only be as long as absolutely necessary. We recommend reviewing each form input and asking whether you could obtain the information in another way, or at a later, more convenient time."])),(l()(),e.Ta(235,0,null,null,1,"h4",[["id","form-elements"]],null,null,null,null,null)),(l()(),e.lb(-1,null,["Form Elements"])),(l()(),e.Ta(237,0,null,null,1,"h6",[],null,null,null,null,null)),(l()(),e.lb(-1,null,["Radios, Checkboxes, and Select Box"])),(l()(),e.Ta(239,0,null,null,1,"p",[],null,null,null,null,null)),(l()(),e.lb(-1,null,["For inputs with 3 or more options, you may use radios, checkboxes or select boxes. We recommend placing your options vertically in one column to make it easier to scan."])),(l()(),e.Ta(241,0,null,null,1,"p",[],null,null,null,null,null)),(l()(),e.lb(-1,null,["Radios and checkboxes are used when it is helpful to compare options within the context of the form, as all selections will be visible at all times. Select boxes typically have more than 7 options that do not need to be compared with each other."])),(l()(),e.Ta(243,0,null,null,1,"h4",[["id","validation-error-messages"]],null,null,null,null,null)),(l()(),e.lb(-1,null,["Validation and Error Messaging"])),(l()(),e.Ta(245,0,null,null,1,"p",[],null,null,null,null,null)),(l()(),e.lb(-1,null,["You also want to let users know when something is wrong with the information provided."])),(l()(),e.Ta(247,0,null,null,1,"h6",[],null,null,null,null,null)),(l()(),e.lb(-1,null,["Error Message Styling"])),(l()(),e.Ta(249,0,null,null,1,"p",[],null,null,null,null,null)),(l()(),e.lb(-1,null,["When showing error inputs, highlight the input field with red in some way, but also pair the red with another visual indicator, like an icon. This will help with accessibility."])),(l()(),e.Ta(251,0,null,null,16,"div",[["class"," clr-row"]],null,null,null,null,null)),(l()(),e.Ta(252,0,null,null,7,"div",[["class","clrweb-DoxMedia is-do-block clr-col-6"]],null,null,null,null,null)),(l()(),e.Ta(253,0,null,null,1,"div",[["class","clrweb-DoxMedia-img"]],null,null,null,null,null)),(l()(),e.Ta(254,0,null,null,0,"img",[["alt","put icons beside inputs"],["src","assets/images/documentation/forms/error-do.svg"]],null,null,null,null,null)),(l()(),e.Ta(255,0,null,null,4,"div",[["class","clrweb-DoxMedia-text"]],null,null,null,null,null)),(l()(),e.Ta(256,0,null,null,1,"h6",[["class","clrweb-DoxMedia-do-dont"]],null,null,null,null,null)),(l()(),e.lb(-1,null,["Do"])),(l()(),e.Ta(258,0,null,null,1,"p",[],null,null,null,null,null)),(l()(),e.lb(-1,null,["Place icons outside the input field. This will also help avoid browser and third-party app collision conflicts."])),(l()(),e.Ta(260,0,null,null,7,"div",[["class","clrweb-DoxMedia is-dont-block clr-col-6"]],null,null,null,null,null)),(l()(),e.Ta(261,0,null,null,1,"div",[["class","clrweb-DoxMedia-img"]],null,null,null,null,null)),(l()(),e.Ta(262,0,null,null,0,"img",[["alt","don't put icons inside of inputs"],["src","assets/images/documentation/forms/error-dont.svg"]],null,null,null,null,null)),(l()(),e.Ta(263,0,null,null,4,"div",[["class","clrweb-DoxMedia-text"]],null,null,null,null,null)),(l()(),e.Ta(264,0,null,null,1,"h6",[["class","clrweb-DoxMedia-do-dont"]],null,null,null,null,null)),(l()(),e.lb(-1,null,["Don't"])),(l()(),e.Ta(266,0,null,null,1,"p",[],null,null,null,null,null)),(l()(),e.lb(-1,null,["Put icons inside the input field. If inside, account for changing form value space (increase characters)."])),(l()(),e.Ta(268,0,null,null,1,"h6",[],null,null,null,null,null)),(l()(),e.lb(-1,null,["Error Message Content"])),(l()(),e.Ta(270,0,null,null,1,"p",[],null,null,null,null,null)),(l()(),e.lb(-1,null,['Humanize the error messaging as much as possible. The content should provide clear guidance on how to fix the error. Avoid unrecognizable system error messages like "code 500 error".'])),(l()(),e.Ta(272,0,null,null,1,"p",[],null,null,null,null,null)),(l()(),e.lb(-1,null,["You may also consider using more than one error message when helpful. For example, if an email address input field has an error, consider either showing \u201cplease enter an email address\u201d for a blank field, or \u201cemail address needs an \u2019@\u2019 symbol followed by a domain\u201d for an invalid symbol."])),(l()(),e.Ta(274,0,null,null,1,"h6",[],null,null,null,null,null)),(l()(),e.lb(-1,null,["Error Message Location"])),(l()(),e.Ta(276,0,null,null,1,"p",[],null,null,null,null,null)),(l()(),e.lb(-1,null,["We recommend displaying error messages within the same area where the error occurs."])),(l()(),e.Ta(278,0,null,null,1,"h6",[],null,null,null,null,null)),(l()(),e.lb(-1,null,["Error Message Behavior"])),(l()(),e.Ta(280,0,null,null,1,"p",[],null,null,null,null,null)),(l()(),e.lb(-1,null,["For most cases, validate when the user leaves the field (onblur). Invalidating fields while users are still typing can be frustrating."])),(l()(),e.Ta(282,0,null,null,1,"p",[],null,null,null,null,null)),(l()(),e.lb(-1,null,["There are some cases where real-time validation can be helpful, such as inputs with sensitive field value lengths (like tweets), or when users return to an error field and successfully edit the error field, or for password fields with visible password strength criteria."])),(l()(),e.Ta(284,0,null,null,7,"div",[["class","alert alert-info"]],null,null,null,null,null)),(l()(),e.Ta(285,0,null,null,6,"div",[["class","alert-items"]],null,null,null,null,null)),(l()(),e.Ta(286,0,null,null,5,"div",[["class","alert-item static"]],null,null,null,null,null)),(l()(),e.Ta(287,0,null,null,2,"div",[["class","alert-icon-wrapper"]],null,null,null,null,null)),(l()(),e.Ta(288,0,null,null,1,"clr-icon",[["class","alert-icon"],["shape","info-circle"]],null,null,null,null,null)),e.Sa(289,16384,null,0,s.Ea,[],null,null),(l()(),e.Ta(290,0,null,null,1,"span",[["class","alert-text"]],null,null,null,null,null)),(l()(),e.lb(-1,null,[" The UX design guidelines documentation is currently a work in progress, and will be updated when they are ready. "]))],function(l,n){var u=n.component;l(n,1,0,u.title,u.newLayout,u.ui,u.ng),l(n,31,0,u.ngForm),l(n,40,0,u.ngLayouts),l(n,46,0,u.ngStructure),l(n,52,0,u.ngHelpers),l(n,77,0,u.ngReset,"typescript"),l(n,84,0,u.ngValidate,"typescript"),l(n,93,0,u.ngOverride),l(n,99,0,u.ngReactiveTs,"typescript"),l(n,101,0,u.ngReactiveHtml),l(n,114,0,u.uiForm),l(n,120,0,u.uiLayouts),l(n,126,0,u.uiStructure),l(n,132,0,u.uiGrid),l(n,144,0,u.uiGrid),l(n,159,0,"horizontal"),l(n,168,0,"vertical"),l(n,177,0,"compact")},function(l,n){l(n,0,0,!0)})}var z=e.Pa("clr-forms-demo",H,function(l){return e.nb(0,[(l()(),e.Ta(0,0,null,null,1,"clr-forms-demo",[],[[2,"content-area",null],[2,"dox-content-panel",null]],null,null,V,R)),e.Sa(1,49152,null,0,H,[],null,null)],null,function(l,n){l(n,0,0,!0,!0)})},{},{},[]),G=u("Ip0R"),O=u("gIcY"),P=u("ZYCi"),N=u("XPsC"),q=u("JsA7");u.d(n,"FormsDemoModuleNgFactory",function(){return U});var U=e.Qa(o,[],function(l){return e.ab([e.bb(512,e.k,e.Ga,[[8,[r.Sb,r.a,r.b,r.d,r.e,r.f,r.g,r.h,r.Ob,r.Pb,r.Qb,r.Rb,r.c,a.a,z]],[3,e.k],e.z]),e.bb(4608,G.p,G.o,[e.w,[2,G.H]]),e.bb(4608,O.C,O.C,[]),e.bb(1073742336,G.b,G.b,[]),e.bb(1073742336,s.Fa,s.Fa,[]),e.bb(1073742336,s.lc,s.lc,[]),e.bb(1073742336,s.Nd,s.Nd,[]),e.bb(1073742336,s.X,s.X,[]),e.bb(1073742336,s.d,s.d,[]),e.bb(1073742336,s.Z,s.Z,[]),e.bb(1073742336,s.r,s.r,[]),e.bb(1073742336,s.Zd,s.Zd,[]),e.bb(1073742336,s.p,s.p,[]),e.bb(1073742336,s.nc,s.nc,[]),e.bb(1073742336,s.O,s.O,[]),e.bb(1073742336,O.z,O.z,[]),e.bb(1073742336,O.k,O.k,[]),e.bb(1073742336,s.Ma,s.Ma,[]),e.bb(1073742336,s.db,s.db,[]),e.bb(1073742336,s.hb,s.hb,[]),e.bb(1073742336,s.lb,s.lb,[]),e.bb(1073742336,s.Fb,s.Fb,[]),e.bb(1073742336,s.Ca,s.Ca,[]),e.bb(1073742336,s.Sa,s.Sa,[]),e.bb(1073742336,s.xc,s.xc,[]),e.bb(1073742336,s.kd,s.kd,[]),e.bb(1073742336,s.G,s.G,[]),e.bb(1073742336,s.wb,s.wb,[]),e.bb(1073742336,s.Lb,s.Lb,[]),e.bb(1073742336,s.v,s.v,[]),e.bb(1073742336,s.Xa,s.Xa,[]),e.bb(1073742336,s.Ra,s.Ra,[]),e.bb(1073742336,s.i,s.i,[]),e.bb(1073742336,s.j,s.j,[]),e.bb(1073742336,s.Va,s.Va,[]),e.bb(1073742336,s.ab,s.ab,[]),e.bb(1073742336,s.sd,s.sd,[]),e.bb(1073742336,s.Cb,s.Cb,[]),e.bb(1073742336,s.Rb,s.Rb,[]),e.bb(1073742336,s.Oa,s.Oa,[]),e.bb(1073742336,s.ob,s.ob,[]),e.bb(1073742336,s.Ib,s.Ib,[]),e.bb(1073742336,s.eb,s.eb,[]),e.bb(1073742336,s.Wb,s.Wb,[]),e.bb(1073742336,s.S,s.S,[]),e.bb(1073742336,s.a,s.a,[]),e.bb(1073742336,P.o,P.o,[[2,P.u],[2,P.l]]),e.bb(1073742336,N.a,N.a,[]),e.bb(1073742336,q.a,q.a,[]),e.bb(1073742336,o,o,[]),e.bb(1024,P.j,function(){return[[{path:"",component:H}]]},[])])})},"Z+lk":function(l,n){l.exports='import {Component} from "@angular/core";\nimport {FormGroup, FormControl, Validators} from "@angular/forms";\n\n@Component({\n    //...\n})\nexport class ReactiveFormsDemo {\n    exampleForm = new FormGroup({\n        sample: new FormControl(\'\', Validators.required),\n    });\n}'},e0Qs:function(l,n){l.exports='<form class="clr-form">\n    ... form controls inside\n</form>'},lzo3:function(l,n){l.exports='<form class="clr-form">\n    <div class="clr-form-control">\n        <label for="example" class="clr-control-label">Label</label>\n        <div class="clr-control-container clr-error">\n            <div class="clr-input-wrapper">\n                <input type="text" id="example" placeholder="Example Input" class="clr-input">\n                <clr-icon class="clr-validate-icon" shape="exclamation-circle"></clr-icon>\n            </div>\n            <span class="clr-subtext">Error message</span>\n        </div>\n    </div>\n</form>'},pSHR:function(l,n){l.exports='<form clrForm>\n    <clr-input-container>\n        <label>Field 1 label</label>\n        <input clrInput type="text" [(ngModel)]="model" name="example" required minlength="5" />\n        <clr-control-helper>Helper text that shows while it is pristine and valid</clr-control-helper>\n        <clr-control-error *clrIfError="\'required\'">Error message about being required</clr-control-error>\n        <clr-control-error *clrIfError="\'minlength\'">Error message about requiring 5 characters</clr-control-error>\n    </clr-input-container>\n</form>'},vuOX:function(l,n){l.exports='<form clrForm>\n    <clr-input-container>\n        <label>Field 1 label</label>\n        <input clrInput type="text" [(ngModel)]="model" name="example" />\n    </clr-input-container>\n    <clr-input-container>\n        <label>Field 2 label</label>\n        <input clrInput type="text" [(ngModel)]="model" name="example" />\n    </clr-input-container>\n</form>'}}]);